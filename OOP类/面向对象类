#! usr/bin/env python
# coding=utf-8
# Author="张维序"

"""
类定义
类：是由一系列属性和方法组成

"""


class F1():
    pass


"""
对象的创建---->就是类实例化的过程
三个特性：
1、对象的句柄--->区分不同的对象

f2 = F1()
f1=F1()
print(id(f1),id(f2))

2、属性：
        公有属性：
                类属性(共有的属性分离出来):它属于类，也属于对象
                实例属性：它只属于对象
                局部变量
        私有属性
3、方法 
"""


class Person():
    gongyou = "China"

    def __init__(self, name, age):
        # 实例属性
        self.name = name
        self.age = age

    def getname(self):
        return self.name

    def getage(self):
        return self.age

    def setname(self, name):
        self.name = name

    def setage(self, age):
        self.age = age

    def info(self):
        return f"name:{self.getname()},age:{self.getage()},addr:{self.gongyou}"


per = Person("zhangsan", '29')
print(per.getname(), per.getage())
per1 = Person("lisi", '30')
per1.setage('20')
print(per1.getage())
print(per1.info())


# 动态参数
class Person1():

    def __init__(self, **kwargs):
        self.kwargs = kwargs

    def info(self):
        print(f"信息：{self.kwargs}")


per = Person1(name="zhangsan")
per2 = Person1(name="zhangsan", age=29, addr="ShenZhen")
per.info()
per2.info()

"""
构造函数：
1、初始化属性
2、一个类可以有多个构造函数

首先一个类，不管是否写了构造函数，他都是有构造函数的
"""


class Person2():

    def __init__(self, name, age):
        self.name = name
        self.age = age


"""
析构函数:执行顺序先构造函数--调用方法--析构函数

对象实例化-->构造函数-->对象调用方法-->代码跳转到具体方法-->执行方法的代码-->最后析构函数
"""


class Person4():
    def __init__(self):
        print("我是构造函数")

    def __del__(self):
        print("我是析构函数")

    def info(self):
        print("我是调用方法")


per = Person4()
per.info()

"""
特性方法:这个方法不能有形式参数
"""


class Person():

    @property
    def get_userid(self):
        pass


"""
静态方法:直接使用类名来调用，它属于类
对象也可以调用静态方法，但是一般不建议这样做
调用的地方比较多的时候使用

"""


class MySQL():
    @staticmethod
    def conn(user):
        pass


# 直接使用类名调用
MySQL.conn("zhangsan")

# 对象调用
per = MySQL()
per.conn("zhangsan")

"""
类方法：直接使用类来进行调用，属于类

"""


class Person():
    @classmethod
    def conn(self):
        pass


"""
属于类：
        类属性
        静态方法
        类方法
属于对象：
        实例属性
        普通方法
        特性方法
"""